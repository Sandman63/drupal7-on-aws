{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Stack for Drupal 7",

  "Parameters": {

    "KeyPairName": {
      "Description": "The key pair name to connect to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },

    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": ["t2.micro", "t2.small"],
      "ConstraintDescription": "must be a t2.micro or t2.small instance type"
    },

    "VpcCidrBlock": {
      "Description": "VPC CIDR block",
      "Type": "String",
      "Default": "10.42.0.0/16"
    },

    "PublicSubnetOneCidr": {
      "Description": "The CIDR ranges of the public subnets",
      "Type": "String",
      "Default": "10.42.0.0/18"
    },

    "PublicSubnetTwoCidr": {
      "Description": "The CIDR ranges of the public subnets",
      "Type": "String",
      "Default": "10.42.64.0/18"
    },

    "PrivateSubnetOneCidr": {
      "Description": "The CIDR ranges of the private subnets",
      "Type": "String",
      "Default": "10.42.128.0/18"
    },

    "PrivateSubnetTwoCidr": {
      "Description": "The CIDR ranges of the private subnets",
      "Type": "String",
      "Default": "10.42.192.0/18"
    },

    "DbMasterUsername": {
      "Description": "The Master username for the Drupal DB",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DbMasterPassword": {
      "Description": "The Master password for the Drupal DB",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "PaperTrailDestination": {
      "Description": "Papertrail destination (host:port)",
      "Type": "String"
    },

    "WebServerCapacity": {
      "Default": "1",
      "Description" : "The initial number of WebServer instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "5",
      "ConstraintDescription" : "must be between 1 and 5 EC2 instances."
    },

    "DBClass" : {
      "Description" : "Database instance class",
      "Type" : "String",
      "Default" : "db.t2.small",
      "AllowedValues" : [ "db.t1.micro", "db.m1.small", "db.m1.medium", "db.m1.large", "db.m1.xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge", "db.m3.medium", "db.m3.large", "db.m3.xlarge", "db.m3.2xlarge", "db.m4.large", "db.m4.xlarge", "db.m4.2xlarge", "db.m4.4xlarge", "db.m4.10xlarge", "db.r3.large", "db.r3.xlarge", "db.r3.2xlarge", "db.r3.4xlarge", "db.r3.8xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge", "db.cr1.8xlarge", "db.t2.micro", "db.t2.small", "db.t2.medium", "db.t2.large"]
,
      "ConstraintDescription" : "must select a valid database instance type."
    },

    "DBAllocatedStorage" : {
      "Default": "5",
      "Description" : "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription" : "must be between 5 and 1024Gb."
    }

  },

  "Mappings": {
    "AmazonMachineImages": {
      "eu-west-1": {
        "64": "ami-b0ac25c3",
        "Description": "Amazon Linux AMI 2016.03.1 (HVM), SSD Volume Type, eu-west-1"
      },
      "us-east-1": {
        "64": "ami-f5f41398",
        "Description": "Amazon Linux AMI 2016.03.1 (HVM), SSD Volume Type, us-east-1"
      },
      "us-west-1": {
        "64": "ami-6e84fa0e",
        "Description": "Amazon Linux AMI 2016.03.1 (HVM), SSD Volume Type, us-west-1"
      },
      "us-west-2": {
        "64": "ami-d0f506b0",
        "Description": "Amazon Linux AMI 2016.03.1 (HVM), SSD Volume Type, us-west-2"
      }
    }
  },

  "Resources": {

    "IAMRoleForDrupalWebServer": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/"
      }
    },

    "DrupalWebServerInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleForDrupalWebServer"
          }
        ]
      }
    },

    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "CidrBlock": { "Ref": "VpcCidrBlock" },
        "Tags": [{
          "Key": "Name",
          "Value": "Drupal 7 stack VPC"
        }]
      }
    },

    "PublicSubnetOne": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "MapPublicIpOnLaunch": true,
        "CidrBlock": { "Ref": "PublicSubnetOneCidr" },
        "AvailabilityZone": {
          "Fn::Select": [ "0", { "Fn::GetAZs": { "Ref": "AWS::Region" } } ]
        },
        "Tags": [{
          "Key": "Name",
          "Value": "Public Subnet #1"
        }]
      }
    },

    "PublicSubnetTwo": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "MapPublicIpOnLaunch": true,
        "CidrBlock": { "Ref": "PublicSubnetTwoCidr" },
        "AvailabilityZone": {
          "Fn::Select": [ "1", { "Fn::GetAZs": { "Ref": "AWS::Region" } } ]
        },
        "Tags": [{
          "Key": "Name",
          "Value": "Public Subnet #2"
        }]
      }
    },

    "PrivateSubnetOne": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "MapPublicIpOnLaunch": false,
        "CidrBlock": { "Ref": "PrivateSubnetOneCidr" },
        "AvailabilityZone": {
          "Fn::Select": [ "0", { "Fn::GetAZs": { "Ref": "AWS::Region" } } ]
        },
        "Tags": [{
          "Key": "Name",
          "Value": "Private Subnet #1"
        }]
      }
    },

    "PrivateSubnetTwo": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "MapPublicIpOnLaunch": false,
        "CidrBlock": { "Ref": "PrivateSubnetTwoCidr" },
        "AvailabilityZone": {
          "Fn::Select": [ "1", { "Fn::GetAZs": { "Ref": "AWS::Region" } } ]
        },
        "Tags": [{
          "Key": "Name",
          "Value": "Private Subnet #2"
        }]
      }
    },

    "PublicSubnetOneRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnetOne" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },

    "PublicSubnetTwoRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnetTwo" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },

    "PrivateSubnetOneRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnetOne" },
        "RouteTableId": { "Ref": "PrivateRouteTableOne" }
      }
    },

    "PrivateSubnetTwoRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnetTwo" },
        "RouteTableId": { "Ref": "PrivateRouteTableTwo" }
      }
    },

    "PrivateRouteToInternetOne": {
      "DependsOn": [ "PrivateRouteTableOne", "NATGatewayOne" ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRouteTableOne" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "NATGatewayOne" }
      }
    },

    "PrivateRouteToInternetTwo": {
      "DependsOn": [ "PrivateRouteTableTwo", "NATGatewayTwo" ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRouteTableTwo" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "NATGatewayTwo" }
      }
    },

    "PrivateRouteTableOne": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": { "VpcId": { "Ref": "VPC" } }
    },

    "PrivateRouteTableTwo": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": { "VpcId": { "Ref": "VPC" } }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },

    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },

    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": { "VpcId": { "Ref": "VPC" } }
    },

    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },

    "NATGatewayOne": {
      "DependsOn": "InternetGateway",
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": [ "ElasticIPOne", "AllocationId" ] },
        "SubnetId": { "Ref" : "PublicSubnetOne" }
      }
    },

    "ElasticIPOne": {
      "Type": "AWS::EC2::EIP",
      "Properties": { "Domain": "vpc" }
    },

    "NATGatewayTwo": {
      "DependsOn": "InternetGateway",
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": [ "ElasticIPTwo", "AllocationId"] },
        "SubnetId": { "Ref" : "PublicSubnetTwo" }
      }
    },

    "ElasticIPTwo": {
      "Type": "AWS::EC2::EIP",
      "Properties": { "Domain": "vpc" }
    },

    "DrupalElasticacheSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Elasticache Security Group",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "11211",
            "ToPort": "11211",
            "CidrIp": {"Ref": "PrivateSubnetOneCidr"}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "11211",
            "ToPort": "11211",
            "CidrIp": {"Ref": "PrivateSubnetTwoCidr"}
          }
        ]
      }
    },

    "DrupalElasticacheCluster": {
      "Type": "AWS::ElastiCache::CacheCluster",
      "Properties": {
        "AutoMinorVersionUpgrade": "true",
        "AZMode" : "cross-az",
        "Engine": "memcached",
        "CacheNodeType": "cache.t1.micro",
        "NumCacheNodes": "2",
        "VpcSecurityGroupIds": [{"Fn::GetAtt": [ "DrupalElasticacheSecurityGroup", "GroupId"]}],
        "PreferredAvailabilityZones" : [
          { "Fn::GetAtt" : [ "PrivateSubnetOne", "AvailabilityZone" ] },
          { "Fn::GetAtt" : [ "PrivateSubnetTwo", "AvailabilityZone" ] }
        ]
      }
    },

    "Drupal7DBSubnetGroup" : {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
        "DBSubnetGroupDescription" : "Subnets available for the Drupal 7 DB Instance",
        "SubnetIds" : [
          { "Ref": "PrivateSubnetOne" },
          { "Ref": "PrivateSubnetTwo" }
        ]
      }
    },

    "Drupal7DbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for the Drupal 7 DB ",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "TCP",
            "FromPort": "3306",
            "ToPort": "3306",
            "CidrIp": { "Ref": "PrivateSubnetOneCidr" }
          },
          {
            "IpProtocol": "TCP",
            "FromPort": "3306",
            "ToPort": "3306",
            "CidrIp": { "Ref": "PrivateSubnetTwoCidr" }
          }
        ],
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Security Group for Drupal 7 RDS instances"
          }
        ]
      }
    },

    "DrupalDb" : {
      "Type" : "AWS::RDS::DBInstance",
      "Properties" : {
        "AllocatedStorage" : { "Ref" : "DBAllocatedStorage" },
        "VPCSecurityGroups" : [ { "Ref" : "Drupal7DbSecurityGroup"} ],
        "DBInstanceClass" : { "Ref": "DBClass" },
        "Engine": "MySQL",
        "StorageType": "gp2",
        "MultiAZ": true,
        "DBSubnetGroupName" : { "Ref" : "Drupal7DBSubnetGroup" },
        "DBInstanceIdentifier": "drupal7",
        "PreferredBackupWindow": "02:00-03:30",
        "BackupRetentionPeriod": "7",
        "PreferredMaintenanceWindow": "sun:04:00-sun:06:00",
        "MasterUsername" : { "Ref": "DbMasterUsername" },
        "MasterUserPassword" : { "Ref": "DbMasterPassword" },
        "Tags": [
          { "Key" : "Name", "Value" : "Drupal 7 Database" }
        ]
      },
      "DeletionPolicy" : "Snapshot"
    },

    "DrupalELBPublicAccess": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for public HTTP and HTTPS access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },

    "DrupalWebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for the Drupal web server inside the private subnet",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": { "Ref": "PrivateSubnetOneCidr"}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": { "Ref": "PrivateSubnetTwoCidr"}
          }
        ],
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Drupal web server host security group"
          },
          {
            "Key": "Service",
            "Value": "Drupal"
          }
        ]
      }
    },

    "DrupalWebServerAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : [
          { "Fn::GetAtt" : [ "PrivateSubnetOne", "AvailabilityZone" ] },
          { "Fn::GetAtt" : [ "PrivateSubnetTwo", "AvailabilityZone" ] }
        ],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfigurationForDrupalWebServer" },
        "MinSize" : "1",
        "MaxSize" : "5",
        "DesiredCapacity" : { "Ref" : "WebServerCapacity" },
        "LoadBalancerNames" : [ { "Ref" : "DrupalWebServerElasticLoadBalancer" } ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "DrupalWebServerElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Subnets": [
          { "Ref": "PrivateSubnetOne" },
          { "Ref": "PrivateSubnetTwo" }
        ],
        "CrossZone" : "true",
        "LBCookieStickinessPolicy" : [ {
          "PolicyName" : "CookieBasedPolicy",
          "CookieExpirationPeriod" : "30"
        } ],
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "80",
          "Protocol" : "HTTP",
          "PolicyNames" : [ "CookieBasedPolicy" ]
        } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/index.php",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "5",
          "Interval" : "10",
          "Timeout" : "5"
        },
        "SecurityGroups": [ { "Ref": "DrupalELBPublicAccess" } ]
      }
    },

    "LaunchConfigurationForDrupalWebServer": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
              "drupal_install" : [ "config" ]
          },
          "config" : {

            "packages" : {
              "yum" : {
                "docker"       : []
              }
            },

            "services" : {
              "sysvinit" : {
                "docker" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            },

            "files" : {

              "/tmp/settings.php": {
                "content":  { "Fn::Join" : [ "", [
                  "$databases['default']['default'] = array(\n",
                  "  'driver' => 'mysql',\n",
                  "  'database' => 'databasename',\n",
                  "  'username' => '", { "Ref": "DbMasterUsername" }, "'\n",
                  "  'password' => '", { "Ref": "DbMasterUsername" }, "'\n",
                  "  'host' => '", { "Fn::Join": [":",[
                        { "Fn::GetAtt" : [ "DrupalDb", "Endpoint.Address" ] },
                        { "Fn::GetAtt" : [ "DrupalDb", "Endpoint.Port" ] }
                      ] ] }, "'\n",
                  "  'prefix' => ''\n",
                  ");\n"
                ]]},
                "mode" : "000400",
                "owner" : "root",
                "group" : "root"
              },

              "/tmp/Dockerfile": {
                "content":  { "Fn::Join" : [ "", [
                  "FROM drupal:7-apache\n",
                  "COPY /tmp/settings.php /var/www/html/files/default/settings.php\n",
                  "# TODO: Add memcached contrib module\n",
                  "# TODO: Add S3 contrib module\n"
                ]]},
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              },

              "/tmp/docker-compose.yml": {
                "content":  { "Fn::Join" : [ "", [
                  "drupal:\n",
                  "build: .\n",
                  "ports:\n",
                  "  - \"80:80\"\n",
                  "log_driver: syslog\n",
                  "log_opt:\n",
                  "  syslog-address: ", { "Ref": "PaperTrailDestination" } , "\n",
                  "  tag: \"drupal7\"\n"
                ]]},
                "mode" : "000400",
                "owner" : "root",
                "group" : "root"
              },

              "/tmp/install-docker-compose.sh": {
                "content": { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "curl -L https://github.com/docker/compose/releases/download/1.7.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n",
                  "chmod +x /usr/local/bin/docker-compose\n"
                ]]},
                "mode" : "000500",
                "owner" : "root",
                "group" : "root"
              },

              "/tmp/start-drupal-container.sh" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "/usr/local/bin/docker-compose build\n",
                  "/usr/local/bin/docker-compose up -d\n"
                ]]},
                "mode" : "000500",
                "owner" : "root",
                "group" : "root"
              }

            },

            "commands" : {
              "01_install_docker_compose": {
                "command" : "/tmp/install-docker-compose.sh",
                "cwd" : "/tmp"
              },

              "10_start_drupal_container" : {
                "command" : "/tmp/start-drupal-container.sh",
                "cwd" : "/tmp"
              }
            }
          }
        }
      },
      "Properties": {
        "IamInstanceProfile": { "Ref": "DrupalWebServerInstanceProfile" },
        "ImageId": {
          "Fn::FindInMap" : [ "AmazonMachineImages", { "Ref" : "AWS::Region" }, "64"]
        },
        "InstanceMonitoring": false,
        "InstanceType": "t2.small",
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "SecurityGroups": [
          { "Ref": "DrupalWebServerSecurityGroup" }
        ],
        "BlockDeviceMappings" : [ {
           "DeviceName" : "/dev/xvda",
           "Ebs" : { "VolumeSize" : "30", "DeleteOnTermination" : "true"}
        } ],

        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "yum update -y aws-cfn-bootstrap\n",

                       "/opt/aws/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource LaunchConfig ",
                       "         --configsets drupal_install ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",

                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource DrupalWebServerAutoScalingGroup ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    }
  }
}
